    def keys(self):
    def values(self):
    def items(self):
    def clear(self):
    def __mul__(self,crtb_2):
    def project(self,colnameslist):
    def __add__(self,crtb_2):
    def __sub__(self,crtb_2):
    def __truediv__(self,crtb_2):
    def unique(self):
    def naturalize(self):
    def intersec(self,crtb_2):
    def __eq__(self,crtb_2):
    def __ne__(self,crtb_2):
    def __contains__(self,crtb_2):
    def include_rowname(self,rowname):
    def include_col(self,col):
    def include_rowname_slice(self,rowname):
    def include_col_slice(self,col):
    def thetajoin(self,crtb2,**kwargs):
            def theta_function(subrowname_1,subrowname_2):
            def theta_function(subrowname_1,subrowname_2):
        def theta_function(subrowname_1,subrowname_2):
    def equijoin(self,crtb2,**kwargs):
    def naturaljoin(self,crtb2,**kwargs):
    def candidates(self):
##########
    def quad_split(s,spt,**kwargs)
    def rplc_blk(s,top,left,bot,right,blk,**kwargs)
    def swap_cols(s,colseqs1,colseqs2,**kwargs)
    def swap_rows(s,rowseqs1,rowseqs2,**kwargs)
    def maprcv
